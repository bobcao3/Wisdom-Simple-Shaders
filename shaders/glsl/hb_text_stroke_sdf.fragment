// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

#include "fragmentVersionSimple.h"

#include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"

varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

#define SHOW_DF 0

void main() {
	float dfValue = texture2D(TEXTURE_0, AdditionalOut.xy).a;
#if SHOW_DF
	gl_FragColor = vec4(dfValue.xxx, 1);
#else
	float scale = sqrt(PRIM_PROPS_0.y * 0.5);

	float bias = 0.5 * scale - 0.9;
	float outlineWidth = PRIM_PROPS_0.z / PRIM_PROPS_0.y * 0.5 * scale;
	dfValue *= scale;

	vec4 c = mix(PRIM_PROPS_1, ColorOut, clamp(dfValue - (bias + outlineWidth), 0.0, 1.0));

	c *= clamp(dfValue - max(0.0, bias - outlineWidth), 0.0, 1.0);
	gl_FragColor = c;
#endif
}
