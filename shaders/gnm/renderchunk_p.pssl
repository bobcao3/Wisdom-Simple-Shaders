#include "ShaderConstantsGNM.h"

struct PS_Input
{
	float4 position : S_POSITION;
	float4 color : COLOR;
#ifndef BYPASS_PIXEL_SHADER
	float2 uv0 : TEXCOORD_0;
	float2 uv1 : TEXCOORD_1;
#endif
#ifdef FOG
	float4 fogColor : FOG_COLOR;
#endif
};

float4 main( in PS_Input PSInput ) : S_TARGET_OUTPUT
{
#ifdef BYPASS_PIXEL_SHADER
	return float4(0.0f, 0.0f, 0.0f, 0.0f);
#else

#ifdef USE_TEXEL_AA
	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv0);
#else
	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv0);	//TODO support TEXEL_AA
#endif

#ifdef SEASONS_FAR
	diffuse.a = 1.0f;
#endif

#ifdef USE_ALPHA_TEST
//If we know that all the verts in a triangle will have the same alpha, we should cull there first.
	#ifdef ALPHA_TO_COVERAGE
		float alphaThreshold = .05f;
	#else
		float alphaThreshold = .5f;
	#endif
	if(diffuse.a < alphaThreshold)
		discard;
#endif

	float4 inColor = PSInput.color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	diffuse = diffuse * TEXTURE_1.Sample(TextureSampler1, PSInput.uv1);
#endif

#ifndef SEASONS

	#if !defined(USE_ALPHA_TEST) && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif	

	diffuse.rgb *= inColor.rgb;

#else
	float2 uv = inColor.xy;
	diffuse.rgb *= lerp(1.0f, TEXTURE_2.Sample(TextureSampler2, uv).rgb*2.0f, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0f;
#endif

#ifdef FOG
	diffuse.rgb = lerp( diffuse.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
#endif

	return diffuse;

#endif
}